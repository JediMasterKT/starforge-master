#!/bin/bash
# StarForge CLI - Portable Multi-Agent Development System

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'  # No Color

# Symbols
CHECK="✓"
CROSS="✗"
ARROW="→"
WARN="⚠️ "
INFO="ℹ️ "

# Get StarForge installation directory
STARFORGE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

# Backup functions
create_backup() {
    local claude_dir="$1"
    local timestamp=$(date +%Y%m%d-%H%M%S)
    local backup_dir="$claude_dir/backups/update-$timestamp"

    echo -e "${INFO}Creating backup..."

    # Create backup directory structure
    mkdir -p "$backup_dir"/{agents,scripts,hooks}

    # Backup files that will be replaced
    cp "$claude_dir/agents"/*.md "$backup_dir/agents/" 2>/dev/null || true
    cp "$claude_dir/scripts"/*.sh "$backup_dir/scripts/" 2>/dev/null || true
    cp "$claude_dir/hooks"/*.sh "$backup_dir/hooks/" 2>/dev/null || true
    cp "$claude_dir/settings.json" "$backup_dir/" 2>/dev/null || true
    cp "$claude_dir/CLAUDE.md" "$backup_dir/" 2>/dev/null || true
    cp "$claude_dir/LEARNINGS.md" "$backup_dir/" 2>/dev/null || true
    cp "$claude_dir/STARFORGE_VERSION" "$backup_dir/" 2>/dev/null || true

    # Count backed up files
    local files_count=$(find "$backup_dir" -type f 2>/dev/null | wc -l | tr -d ' ')

    # Get pre-update version
    local pre_version="unknown"
    if [ -f "$claude_dir/STARFORGE_VERSION" ]; then
        pre_version=$(jq -r '.version // "unknown"' "$claude_dir/STARFORGE_VERSION" 2>/dev/null || echo "unknown")
    fi

    # Create manifest
    cat > "$backup_dir/manifest.json" << MEOF
{
  "backup_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "pre_update_version": "$pre_version",
  "files_backed_up": $files_count
}
MEOF

    # Store backup path
    echo "$backup_dir" > "$claude_dir/.last-backup"

    echo -e "${CHECK} Backup created: update-$timestamp ($files_count files)"

    # Cleanup old backups
    cleanup_old_backups "$claude_dir"
}

cleanup_old_backups() {
    local claude_dir="$1"
    local backup_base="$claude_dir/backups"

    # Keep only the last 5 backups
    if [ -d "$backup_base" ]; then
        local backup_count=$(find "$backup_base" -maxdepth 1 -type d -name "update-*" 2>/dev/null | wc -l | tr -d ' ')

        if [ "$backup_count" -gt 5 ]; then
            # Remove oldest backups, keep newest 5
            find "$backup_base" -maxdepth 1 -type d -name "update-*" -print0 2>/dev/null | \
                xargs -0 ls -td 2>/dev/null | \
                tail -n +6 | \
                xargs rm -rf 2>/dev/null || true

            local removed=$((backup_count - 5))
            echo -e "${INFO}Cleaned up $removed old backup(s)"
        fi
    fi
}

# Command dispatcher
COMMAND="${1:-help}"
shift || true

case "$COMMAND" in
    install)
        # Run the installer
        "$STARFORGE_DIR/bin/install.sh" "$@"
        ;;

    update)
        # Update StarForge agents from latest templates
        if [ ! -d ".claude" ]; then
            echo -e "${RED}❌ StarForge not installed in this project${NC}"
            echo -e "   Run: starforge install"
            exit 1
        fi

        echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        echo -e "${BLUE}🔄 Updating StarForge Agents${NC}"
        echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        echo ""

        # Pull latest from starforge-master repo
        echo -e "${INFO}Pulling latest StarForge templates..."
        cd "$STARFORGE_DIR"
        if git pull origin main --quiet; then
            echo -e "${CHECK} Updated starforge-master from GitHub"
        else
            echo -e "${WARN}Could not pull from GitHub (using local templates)"
        fi
        cd - > /dev/null

        # Get target directory
        TARGET_DIR="$(pwd)"
        CLAUDE_DIR="$TARGET_DIR/.claude"

        # Create backup BEFORE any file overwrites
        create_backup "$CLAUDE_DIR"

        # Update agent definitions
        echo -e "${INFO}Updating agent definitions..."
        cp "$STARFORGE_DIR/templates/agents"/*.md "$CLAUDE_DIR/agents/"
        echo -e "${CHECK} Updated 5 agent definitions"

        # Update scripts
        echo -e "${INFO}Updating scripts..."
        cp "$STARFORGE_DIR/templates/scripts"/*.sh "$CLAUDE_DIR/scripts/"
        chmod +x "$CLAUDE_DIR/scripts"/*.sh
        echo -e "${CHECK} Updated scripts"

        # Update hooks
        echo -e "${INFO}Updating hooks..."
        cp "$STARFORGE_DIR/templates/hooks"/*.sh "$CLAUDE_DIR/hooks/"
        chmod +x "$CLAUDE_DIR/hooks"/*.sh
        echo -e "${CHECK} Updated hooks"

        # Update protocol files
        echo -e "${INFO}Updating protocol files..."
        cp "$STARFORGE_DIR/templates/CLAUDE.md" "$CLAUDE_DIR/"
        cp "$STARFORGE_DIR/templates/LEARNINGS.md" "$CLAUDE_DIR/"
        echo -e "${CHECK} Updated protocol files"

        # Update settings with path replacement
        echo -e "${INFO}Updating settings.json..."
        sed "s|{{PROJECT_DIR}}|$TARGET_DIR|g" "$STARFORGE_DIR/templates/settings/settings.json" > "$CLAUDE_DIR/settings.json"
        echo -e "${CHECK} Updated settings.json"

        echo ""
        echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        echo -e "${CHECK} ${GREEN}StarForge updated successfully!${NC}"
        echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        echo ""
        echo -e "${YELLOW}Updated components:${NC}"
        echo "  - 5 agent definitions (orchestrator, senior-engineer, junior-engineer, qa-engineer, tpm-agent)"
        echo "  - Scripts (trigger-monitor, trigger-helpers, watch-triggers)"
        echo "  - Hooks (nuclear-bash-guardrails, nuclear-edit-guardrails, agent-isolation-validator)"
        echo "  - Protocol files (CLAUDE.md, LEARNINGS.md)"
        echo "  - Settings (settings.json)"
        echo ""
        echo -e "${GREEN}Preserved:${NC}"
        echo "  - Agent learnings (.claude/agents/agent-learnings/)"
        echo "  - Breakdowns (.claude/breakdowns/)"
        echo "  - Triggers (.claude/triggers/)"
        echo "  - Coordination files (.claude/coordination/)"
        echo "  - PROJECT_CONTEXT.md and TECH_STACK.md"
        echo ""
        ;;

    analyze)
        # Run project analyzer
        if [ ! -d ".claude" ]; then
            echo -e "${RED}❌ StarForge not installed in this project${NC}"
            echo -e "   Run: starforge install"
            exit 1
        fi

        "$STARFORGE_DIR/bin/analyze.sh" "$@"
        ;;

    use)
        # Invoke a specific agent
        AGENT_NAME="$1"

        if [ -z "$AGENT_NAME" ]; then
            echo -e "${RED}❌ No agent specified${NC}"
            echo -e "   Usage: starforge use <agent>"
            echo -e "   Available agents: orchestrator, senior-engineer, junior-engineer, qa-engineer, tpm-agent"
            exit 1
        fi

        if [ ! -d ".claude" ]; then
            echo -e "${RED}❌ StarForge not installed in this project${NC}"
            echo -e "   Run: starforge install"
            exit 1
        fi

        # Check if agent definition exists
        if [ ! -f ".claude/agents/$AGENT_NAME.md" ]; then
            echo -e "${RED}❌ Unknown agent: $AGENT_NAME${NC}"
            echo -e "   Available agents: orchestrator, senior-engineer, junior-engineer, qa-engineer, tpm-agent"
            exit 1
        fi

        echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        echo -e "${BLUE}🤖 Invoking $AGENT_NAME${NC}"
        echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        echo ""
        cat ".claude/agents/$AGENT_NAME.md"
        ;;

    monitor)
        # Watch for agent triggers
        if [ ! -d ".claude" ]; then
            echo -e "${RED}❌ StarForge not installed in this project${NC}"
            echo -e "   Run: starforge install"
            exit 1
        fi

        "$STARFORGE_DIR/.claude/scripts/trigger-monitor.sh" "$@"
        ;;

    status)
        # Show current StarForge status
        if [ ! -d ".claude" ]; then
            echo -e "${RED}❌ StarForge not installed in this project${NC}"
            echo -e "   Run: starforge install"
            exit 1
        fi

        echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        echo -e "${BLUE}📊 StarForge Status${NC}"
        echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        echo ""

        # Current branch
        CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
        echo -e "${YELLOW}Current Branch:${NC} $CURRENT_BRANCH"
        echo ""

        # Worktrees
        echo -e "${YELLOW}Worktrees:${NC}"
        git worktree list 2>/dev/null | while read -r line; do
            echo "  $line"
        done
        echo ""

        # Triggers
        TRIGGER_COUNT=$(find .claude/triggers -name "*.trigger" 2>/dev/null | wc -l | tr -d ' ')
        echo -e "${YELLOW}Pending Triggers:${NC} $TRIGGER_COUNT"
        if [ "$TRIGGER_COUNT" -gt 0 ]; then
            find .claude/triggers -name "*.trigger" 2>/dev/null | while read -r trigger; do
                echo "  - $(basename "$trigger")"
            done
        fi
        echo ""

        # GitHub Issues
        if command -v gh >/dev/null 2>&1; then
            echo -e "${YELLOW}GitHub Issues:${NC}"
            gh issue list --limit 5 2>/dev/null || echo "  (none or gh not configured)"
        fi
        echo ""
        ;;

    help|--help|-h)
        echo ""
        echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        echo -e "${BLUE}StarForge - Portable Multi-Agent Development System${NC}"
        echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        echo ""
        echo "A portable multi-agent development system for Claude Code"
        echo ""
        echo -e "${GREEN}COMMANDS:${NC}"
        echo ""
        echo -e "  ${YELLOW}starforge install${NC}"
        echo "    Install StarForge in the current project"
        echo "    Creates .claude/ structure, agent definitions, and git worktrees"
        echo ""
        echo -e "  ${YELLOW}starforge update${NC}"
        echo "    Update agents and scripts from latest templates"
        echo "    Pulls from GitHub and refreshes .claude/ without re-setup"
        echo ""
        echo -e "  ${YELLOW}starforge analyze${NC}"
        echo "    Analyze your project and generate documentation"
        echo "    Creates PROJECT_CONTEXT.md, TECH_STACK.md, and initial-assessment.md"
        echo ""
        echo -e "  ${YELLOW}starforge use <agent>${NC}"
        echo "    Invoke a specific agent"
        echo "    Agents: orchestrator, senior-engineer, junior-engineer, qa-engineer, tpm-agent"
        echo ""
        echo -e "  ${YELLOW}starforge monitor${NC}"
        echo "    Watch for agent triggers and handoffs (run in separate terminal)"
        echo ""
        echo -e "  ${YELLOW}starforge status${NC}"
        echo "    Show current agent status, worktrees, and GitHub queue"
        echo ""
        echo -e "  ${YELLOW}starforge help${NC}"
        echo "    Show this help message"
        echo ""
        echo -e "${GREEN}EXAMPLES:${NC}"
        echo ""
        echo "  # Install StarForge in a new project"
        echo "  cd my-project && starforge install"
        echo ""
        echo "  # Analyze an existing project"
        echo "  starforge analyze"
        echo ""
        echo "  # Update to latest agent definitions"
        echo "  starforge update"
        echo ""
        echo "  # Create a breakdown for a feature"
        echo "  starforge use senior-engineer"
        echo ""
        echo "  # Check what agents are doing"
        echo "  starforge status"
        echo ""
        echo -e "${GREEN}WORKFLOW:${NC}"
        echo ""
        echo "  1. Install:        starforge install"
        echo "  2. Analyze:        starforge analyze"
        echo "  3. Plan:           starforge use senior-engineer"
        echo "  4. Create tickets: (TPM triggered automatically)"
        echo "  5. Monitor:        starforge monitor (in separate terminal)"
        echo "  6. Assign work:    starforge use orchestrator"
        echo "  7. Check status:   starforge status"
        echo ""
        ;;

    *)
        echo -e "${RED}Unknown command: $COMMAND${NC}"
        echo "Run 'starforge help' for usage"
        exit 1
        ;;
esac
